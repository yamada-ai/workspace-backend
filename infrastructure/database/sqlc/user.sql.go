// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, tier, created_at, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING id, name, tier, created_at, updated_at
`

type CreateUserParams struct {
	Name      string           `json:"name"`
	Tier      int32            `json:"tier"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Tier,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, name, tier, created_at, updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByName = `-- name: FindUserByName :one
SELECT id, name, tier, created_at, updated_at
FROM users
WHERE name = $1
LIMIT 1
`

func (q *Queries) FindUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByNameForUpdate = `-- name: FindUserByNameForUpdate :one
SELECT id, name, tier, created_at, updated_at
FROM users
WHERE name = $1
FOR UPDATE
LIMIT 1
`

func (q *Queries) FindUserByNameForUpdate(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByNameForUpdate, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET tier = $2, updated_at = $3
WHERE id = $1
RETURNING id, name, tier, created_at, updated_at
`

type UpdateUserParams struct {
	ID        int32            `json:"id"`
	Tier      int32            `json:"tier"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Tier, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
