// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeSession = `-- name: CompleteSession :one
UPDATE sessions
SET actual_end = $2, updated_at = $3
WHERE id = $1
RETURNING id, user_id, work_name, start_time, planned_end, actual_end, icon_id, created_at, updated_at
`

type CompleteSessionParams struct {
	ID        int32            `json:"id"`
	ActualEnd pgtype.Timestamp `json:"actual_end"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CompleteSession(ctx context.Context, arg CompleteSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, completeSession, arg.ID, arg.ActualEnd, arg.UpdatedAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkName,
		&i.StartTime,
		&i.PlannedEnd,
		&i.ActualEnd,
		&i.IconID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, work_name, start_time, planned_end, icon_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, work_name, start_time, planned_end, actual_end, icon_id, created_at, updated_at
`

type CreateSessionParams struct {
	UserID     int32            `json:"user_id"`
	WorkName   pgtype.Text      `json:"work_name"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	PlannedEnd pgtype.Timestamp `json:"planned_end"`
	IconID     pgtype.Int4      `json:"icon_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.WorkName,
		arg.StartTime,
		arg.PlannedEnd,
		arg.IconID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkName,
		&i.StartTime,
		&i.PlannedEnd,
		&i.ActualEnd,
		&i.IconID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findActiveSessionByUserID = `-- name: FindActiveSessionByUserID :one
SELECT id, user_id, work_name, start_time, planned_end, actual_end, icon_id, created_at, updated_at
FROM sessions
WHERE user_id = $1 AND actual_end IS NULL
ORDER BY start_time DESC
LIMIT 1
`

func (q *Queries) FindActiveSessionByUserID(ctx context.Context, userID int32) (Session, error) {
	row := q.db.QueryRow(ctx, findActiveSessionByUserID, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkName,
		&i.StartTime,
		&i.PlannedEnd,
		&i.ActualEnd,
		&i.IconID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSessionByID = `-- name: FindSessionByID :one
SELECT id, user_id, work_name, start_time, planned_end, actual_end, icon_id, created_at, updated_at
FROM sessions
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindSessionByID(ctx context.Context, id int32) (Session, error) {
	row := q.db.QueryRow(ctx, findSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkName,
		&i.StartTime,
		&i.PlannedEnd,
		&i.ActualEnd,
		&i.IconID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserSessions = `-- name: ListUserSessions :many
SELECT id, user_id, work_name, start_time, planned_end, actual_end, icon_id, created_at, updated_at
FROM sessions
WHERE user_id = $1
ORDER BY start_time DESC
LIMIT $2 OFFSET $3
`

type ListUserSessionsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserSessions(ctx context.Context, arg ListUserSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, listUserSessions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WorkName,
			&i.StartTime,
			&i.PlannedEnd,
			&i.ActualEnd,
			&i.IconID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionPlannedEnd = `-- name: UpdateSessionPlannedEnd :one
UPDATE sessions
SET planned_end = $2, updated_at = $3
WHERE id = $1
RETURNING id, user_id, work_name, start_time, planned_end, actual_end, icon_id, created_at, updated_at
`

type UpdateSessionPlannedEndParams struct {
	ID         int32            `json:"id"`
	PlannedEnd pgtype.Timestamp `json:"planned_end"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateSessionPlannedEnd(ctx context.Context, arg UpdateSessionPlannedEndParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSessionPlannedEnd, arg.ID, arg.PlannedEnd, arg.UpdatedAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkName,
		&i.StartTime,
		&i.PlannedEnd,
		&i.ActualEnd,
		&i.IconID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
